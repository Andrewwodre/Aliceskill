from flask import Flask, request, jsonify
import logging
import random
from stories import loose, sucv, stor

real_story = ['''Парень задолжал очень большую сумму местному банку. Он провел вечер в баре и сильно напился. Вернувшись домой, он забыл закрыть дверь. Пришедшие за ним коллекторы вломились в дом и начали ему угрожать,  он выдал место хранения ценных вещей. Коллекторы забрали все драгоценности и ушли, а пьяный парень в бреду пришел к выводу, что жить смысла больше нет и повесился. ''',
'''Гувернантка действительно была влюблена в мужа хозяйки, но у нее не было с ним личных связей. Она сильно завидовала положению жены, поэтому отравила ужин хозяйки, а яд спрятала в шкафу на рабочем месте повара. Ее целью было занять место женщины в жизни.''',
'''Все в семье кроме старого деда трудились, а он только ел, спал и критиковал остальных. Это очень раздражало сына. К тому же, семью преследовали неудачи, что очень плохо сказывалось на эмоциональном состоянии мужчины. Не выдержав, ночью он его убил.''']

__questions = [[('Я крепка, как скала, но рушусь от слова. Что я?', ['тишина']),
                ('Умнейший человек не замечает одного... Что же это?', ['собственный нос', 'нос', 'свой нос']),
                ('Дочь морская, но в воде умираю. Что я?', ['соль']),
                ('У меня бывает борода. Меня можно испортить. Да и ростом бываю не высок. Ниже пояса. Кто я ?',
                 ['шутка', 'прикол', 'анекдот', 'каламбур', 'шуточка']),
                ('Девять одинаковых кошек в лодке, одна cпрыгнула. Сколько осталось ?',
                 ['ни одной', 'ноль', 'нисколько', 'не осталось']),
                ('Чего хочет тот, кто полностью удовлетворен ?', ['ничего']),
                ('Я — вода и по воде плаваю. Кто я?', ['льдинка', 'лед', 'лёд', 'ледышка', "льдина"]),
                ('Все меня топчут, а я — всё лучше.', ['тропинка', 'тропа', 'дорожка']),
                ('Что невозможно удержать и десяти минут, хотя оно легче пёрышка?', 'дыхание'),
                ('Я ем и голодаю, а мой брат идет и пропадает', ['огонь', 'костер', 'костёр', 'пламя']),
                ('От головы до хвоста 12 м, а от хвоста до головы 0 м. Что это?', ['год']),
                ('Что не может увеличить лупа в треугольнике?', ['углы', 'угол']),
                ('Чем их больше, тем вес меньше. Что это?', ['дырки', 'дыры', 'отверстия', 'дырочки']),
                ('Какой пробкой нельзя заткнуть ни одну бутылку?',
                 ['дорожной', 'автомобильной', 'машинной', 'транспортной']),
                ('Завязать можно, а развязать нельзя.', ['разговор', 'роман']), ], [
                   ('Что можно найти в прошлом и создать в настоящем, но невозможно изменить в будущем?', ['история']),
                   ('Что исчезает, как только ее назовёшь?', ['тишина']),
                   ('Что может летать без крыльев и плакать без глаз?', ['облако', 'облака', 'облачко', 'облачка']),
                   ('Что раздевается, когда становится холодно?', ['дерево', 'деревья', 'береза', 'дуб']),
                   ('Без пальцев показываю, без рук бью, без ног хожу, что я?', ['часы']),
                   ('Могу заполнить зал или единственное сердце, однажды забрав, мной нельзя поделиться, что я?',
                    ['одиночество', 'уединение']),
                   ('Я могу подкрасться сзади или ждать тебя впереди, но когда я покажусь, тебе уже не быть прежним, что я?',
                   ['предательство', 'обман', 'измена', 'дезертирство']),
                   ('Я могу заставить вас плакать и мёртвых оживить. Появляюсь за секунду и за жизнь меня не убить, что я?',
                   ['память', 'наследие', 'воспоминания']),
                   ('Я срываю маски, обращу друга врагом и заставлю возненавидеть того, кого любишь, что я?',
                    ['предательство', 'обман', 'измена', 'дезертирство']),
                   ('Я могу начать и закончить войну, я могу даровать великую силу или оставить без всякой, я могу родиться за миг и ничто не сможет меня удержать, что я?',
                   ['любовь']),
                   ('Когда я с вами, вы меня не цените, но, потеряв, мечтаете вернуть, что я?', ['время']),
                   ('Я могу быть в толпе, но всегда отличаюсь, кто я?', ['тень', 'отражение']),
                   ('Похитив вас ночью, с утра отпускаю. Со мною все довольны, в разлуке страдают. Что я?',
                    ['сон', 'мечта']),
                   ('В каком месяце болтливая девочка говорит меньше всего?', ['февраль', 'в феврале'])],
                  [('Какое животное утром ходит на 4 ногах, днем на 2, а вечером на 3?', ['человек']),
                  ('На футбольный матч всегда приходил один и тот же человек. До начала игры он называл ее счет и всегда оказывался прав. Какой был счет?', ['ноль ноль', 'ноль-ноль', 'по нулям', 'нули', 'нулевая ничья']),
                  ('На каком языке говорят молча?', ['жестов']),
                  ('Мальчик заплатил за бутылку с пробкой 11 рублей. Бутылка стоит на 10 рублей больше, чем пробка. Сколько стоит пробка? ', ['50 копеек']),
                  ('По чему ходят часто, а ездят редко?', ['лестница']),
                  ('Как человеку не спать 8 дней?', ['спать по ночам', 'спать ночью', 'ночью', 'по ночам']),
                  ('По какому животному ходят люди и проезжают машины?', ['зебра', 'по зебре']),
                  ('В каком слове три «о»?', ['трио']),
                  ('Сколько лет в году?', ['одно']),
                  ('Какой знак нужно поставить между 6 и 7, чтобы результат оказался меньше 7 и больше 6?', ['запятая', 'запятую']),
                  ('У кого за носом пятка?', ['обувь', 'у обуви', 'ботинок', 'у ботинка']),
                  ('Самая музыкальная из семейства бобовых', ['фасоль'])
                  ]]

__evidences = [[
    'Тело было найдено матерью погибшего на следующий день после смерти, он был повешен на петле, под его ногами была опрокинутая табуретка.',
    'Соседи заявили, что парень возвращался домой поздно вечером очень пьяным.',
    'Мать утверждала, что ее сын был очень жизнерадостным человеком и никогда бы такого не совершил.',
    'Выяснилось, что у парня было множество долгов.',
    'При обыске квартиры обнаружили пропажу ценных вещей.'],
    ['На теле погибшей нет следов насилия, эксперты определили, что смерть произошла от отравления.',
     'При опросе слуг определили двух людей, возможно причастных к смерти женщины. Повар часто жаловался на маленькую зарплату и на то, как с ним обращаются хозяева. А про гувернантку давно ходит немало слухов о том, что она любовница хозяина дома.',
     'И повар, и гувернантка отрицали свою вину и утверждали, что никак не могли быть причастны к смерти хозяйки.',
     'На кухне повара был найден мышьяк'],
    ['"В квартире жили 4 человека: старик, старуха и женщина с мужчиной – их дети. Семья жила в бедности. Стены в доме тонкие, всем прекрасно слышно, что происходит на лестничной площадке. В период с вечера до утра в квартиру жертвы никто посторонний не заходил."',
    '"Старуха утверждала, что в последнее время их мучил дух ее погибшей матери. По ее словам, мать была недовольна выбором дочери, все время доставляла им неприятности и в итоге забрала за собой мужа."',
    '"Старик выглядел очень старым, он умер в своей кровати ночью, у него было перерезано горло острым предметом, орудие убийства найти не вышло."',
    '"Женщина заявила, что старику давно было пора на покой, он не приносил семье никакой пользы. Она говорила, что благодарна своей покойной бабушке за это. Мужчина был в очень подавленном состоянии. Он отказался давать показания."'
    ]]

final = [
    '"Нет, постойте, кажется я ошибся!" - вскрикнул Джейкоб. Вот причина сметри Ричарда Паркера: Выберите вариант: Самоубийство, Мать, Коллекторы',
    '"Нет, постойте, кажется я ошибся!" - вскрикнул Джейкоб. Вот причина сметри Амелии Уильямс: Выберите вариант: Повар, Гувернантка, Муж',
    '"Нет, постойте, кажется я ошибся!" - вскрикнул Джейкоб. Вот причина сметри старика: Выберите вариант: покойная свекровь, жена старика, дочь, сын']
podozrev = [["Самоубийство", "Мать", "Коллекторы"],
            ["Повар", "Гувернантка", "Муж"],
            ["покойная свекровь", "жена старика", "дочь", "сын"]]
user_evidences = []
imgs = [["1540737/ea2b6f5535db24b204c4", "1030494/b1e4f51a8ab946689d96", "1652229/64d08033d02d6b801213",
         "997614/26e420a64e0e6a770855", "213044/6cb4cbdfecbef7d9bc9f", "1521359/83f7e98dfb13ba5e5b88",
         "1652229/a162e16f057ffb0da606"],
        ["1030494/476ac8fdd34a4c1cbf4f", "1652229/8f49d142d7bc4c3429b8", "1652229/4371f865bb5c9698d76e",
         "937455/51a812659991737759e4"],
       ['937455/8c1dd5375d01e3031ba1', '1030494/58eaee8f1db2fc211120', '997614/0051b9f73b97d8fe060e', '1030494/b0412d3ecb0ecef40bb2']]
app = Flask(__name__)
used = []
users = {}
logging.basicConfig(level=logging.INFO)
sessionStorage = {}
question = "абвгдеёжзийклмнопрстуфх"
ra = [['суицид', 'самоубийство', 'убил себя', 'повесился', 'покончил с собой', "ричард паркер"],
      ['гувернантка', 'гувернант', 'служанка', 'помощница'],
      ["сын"]]
chose = ['Чтобы выбрать дело, назови число от 1 до 3.',
        'Выбери историю, назови число от 1 до 3',
        'Детектив, беритесь скорее за дело, назовите число от 1 до 3',
        'Жители Сент-Льюис жаждут узнать правду. Выберите дело, назовите число от 1 до 3.']

unkn = ['Извините, детектив, я вас не понимаю.',
        'Пожалуйста, выберите ответ из предложенных мной вариантов.',
        'Детектив, пожалуйста, повторите ваш ответ.',
        'К сожалению, я вас не понимаю, повторите пожалуйста ваш ответ.']

restartim = [
  "Детектив, вы хотите начать все заново?",
  "Детектив, начнем заново?",
  "Детектив, начать все сначала?"
]
nach = [
  '''Здравствуйте, детектив! Агентство Сент-Льюис радо вас видеть! Хотите расследовать дело? Скажите "да", чтобы начать игру или "помощь", если у вас что-то не получается. Чтобы узнать больше об игре, скажите "об игре". Когда расследование начнется, вы можете обратиться к уже найденным уликам, сказав "дневник". В нашей игре могут присутствовать сцены курения. Не забывайте, курение вредит вашему здоровью! Удачи, детектив!''',
  '''Приветствуем, детектив! Агентство Сент-Льюис подготовило для вас новые нерасследованные дела. Скажите "да", чтобы начать игру, а если хотите узнать о ней побольше, скажите "об игре". Если у вас возникли трудности, скажите "помощь". В любой момент игры вы можете обратиться к собранным уликам, для этого скажите "дневник". В игре присутствуют сцены курения, не забывайте, что оно вредит вашему здоровью! Желаем удачи!''',
  '''Рады видеть вас, детектив! В агентстве Сент-Льюис появились новые дела для вас. Желаете начать? Скажите "да", если готовы. Если вам что-то непонятно, скажите "помощь". Если вам хочется узнать об игре больше, скажите "об игре". По ходу дела все собранные улики записываются в дневник, вы в любой момент можете их перечитать, сказав "дневник". В игре могут присутствовать сцены курения. Напоминаем, что курение вредит вашему здоровью. Желаем удачи!'''
]
porog = [
  'Увы, но детектив осудил невиновного. Правосудие было нарушено... Попробуете снова?',
  'Нет! Джейкоб проиграл это дело, обвинение пало не на того... Попробуете еще раз?',
  'Не вышло. Блэк ошибся, наказание понес ни в чем не повинный... Начнем сначала?',
  'К сожалению, Джейкобу не удалось раскрыть это дело: за решеткой оказался невиновный... Попробуете снова?'
]
pobe = [
  'Да! Джейкоб как всегда оказался прав! Вот как все было на самом деле:'
  'Победа! Джейкоб в очередной раз выиграл дело! Вот что произошло на самом деле:'
  'Так держать! Как и ожидалось, Джейкоб смог разгадать тайну и выиграл дело. Вот как обстояли дела в действительности:'
  'Ура! Это очередная победа Блэка! Вот что случилось в тот день:'
  ]
@app.route('/post', methods=['POST'])
def main():
    print(users)
    logging.info(f'Request: {request.json!r}')
    response = {
        'session': request.json['session'],
        'version': request.json['version'],
        'session': request.json['session'],
        'response': {
            'end_session': False
        }
    }
    response['session'] = request.json["session"]
    if response['response']['end_session'] == True:
      users.pop(req['session']['user_id'], none)

    logging.info(f'Response:  {response!r}')

    handle_dialog(request.json, response)
    # Преобразовываем в JSON и возвращаем
    return jsonify(response)

def handle_dialog(req, res):
  global users
  global loose, sucv, stor, real_story, imgs, final, __evidences, __questions, a
  user_id = req['session']['user_id']
  x = 0
  if req['session']['new']:
      res['response']['text'] = f'''{nach[randint.random(0, 2)]}'''
      users[user_id] = {
          'score': 0,
          "k": 0,
          'h': 0,
          'c': 0,
          'stro': -1,
          "cont": 0,
          "b": 0,
          "ns": 4,
          "user_evidences": [],
          "rest": 0,
          "used": [],
          'question': "",
          'a': res['response'],
          'end_session': False
        }
      res['response']['buttons'] = [{'title': "Начать игру", 'hide': True}, {'title': "Помощь", 'hide': True}, {'title': "Об игре", 'hide': True}]
      return

  users[user_id]["b"] = 0
  if users[user_id]["rest"] == 1 or users[user_id]["rest"] == 2:
    if req['request']['original_utterance'].lower() in [
        'хорошо',
        'погнали',
        'да',
        'вперёд',
        'давай',
        'хочу'
    ]:
        users[user_id]["rest"] = 1
    else:
      users[user_id]["rest"] = 2
      res['response']['text'] = unkn[random.randint(0, 3)]
      return

  if users[user_id]["rest"] == 1:
      res['response']['text'] = f'{nach[randint.random(0, 2)]}'
      users[user_id] = {
          'score': 0,
          "k": 0,
          'h': 0,
          'c': 0,
          'stro': -1,
          "cont": 0,
          "b": 0,
          "ns": 4,
          "user_evidences": [],
          "rest": 0,
          "used": [],
          'question': "",
          'a': res['response'],
          'end_session': False
        }
      res['response']['buttons'] = [{'title': "Начать игру", 'hide': True}, {'title': "Помощь", 'hide': True}, {'title': "Об игре", 'hide': True}]
      return
  if users[user_id]["cont"] == 1:
      if req['request']['original_utterance'].lower() in [
          'продолжить'
        ]:
          res['response'] = users[user_id]["a"]
          users[user_id]["cont"] = 0
          return
      else:
          res['response']['text'] = unkn[random.randint(0, 3)]
          return
  if users[user_id]["stro"] == -1 and users[user_id]["b"] != 2 and req['request']['original_utterance'].lower() in [
      'хорошо',
      'погнали',
      'да',
      'вперёд',
      'давай',
      'хочу',
      'начать игру'
    ]:
      print(1)
      res['response']['text'] = f'{chose[random.randint(0, 3)]}'
      res['response']['buttons'] = [{'title': "1", 'hide': True}, {'title': "2", 'hide': True}, {'title': "3", 'hide': True}]
      users[user_id]["a"] = res['response']
      users[user_id]["c"] = 1
      return
  if users[user_id]["c"] == 1:
      if "один" in req['request']['original_utterance'].lower() or "1" in req['request']['original_utterance'].lower():
          users[user_id]["stro"] = 0
          users[user_id]["c"] = 0
          users[user_id]["score"] = 0
          users[user_id]["b"] = 1
          users[user_id]["ns"] = 5
      elif "два" in req['request']['original_utterance'].lower() or "2" in req['request']['original_utterance'].lower():
          users[user_id]["stro"] = 1
          users[user_id]["c"] = 0
          users[user_id]["score"] = 0
          users[user_id]["b"] = 1
          users[user_id]["ns"] = 4
      elif "три" in req['request']['original_utterance'].lower() or "3" in req['request']['original_utterance'].lower():
          users[user_id]["stro"] = 2
          users[user_id]["c"] = 0
          users[user_id]["score"] = 0
          users[user_id]["b"] = 1
          users[user_id]["ns"] = 4
  if "об игре" in req['request']['original_utterance'].lower() or "что ты умеешь" in req['request']['original_utterance'].lower():
      res['response']['text'] = f'''"Агентство Сент-Льюис" - детективная игра, в которой вы будете помогать детективу Джейкобу Блеку расследовать дела. Разгадывая загадки, вы будете находить улики, которые помогут распутать дело. В любой момент игры вы можете обратиться к дневнику Блэка, в котором он хранит все найденные улики, для этого скажите "дневник". Когда Джейкоб изучит все доступные улики, вынесите вердикт и раскройте преступление. Не подведите Агентство, детектив!
Чтобы продолжить, скажите "продолжить".'''
      res['response']['buttons'] = [{'title': "Продолжить", 'hide': True}]
      users[user_id]["cont"] = 1
      return
  if "помощь" in req['request']['original_utterance'].lower():
      res['response']['text'] = f'''Основная задача игрока - отгадывать загадки, если ваша проблема связана с ответом, то мы не сможем вам помочь. Если вы хотите начать заново, в любой момент игры скажите "заново". Основную информацию о том, как играть, вы можете найти в разделе "об игре". Удачи!
Чтобы продолжить, скажите "Продолжить".'''
      users[user_id]["cont"] = 1
      res['response']['buttons'] = [{'title': "продолжить", 'hide': True}]
      return
  if "дневник" in req['request']['original_utterance'].lower():
      if users[user_id]["user_evidences"] != []:
          res["response"]['text'] = f'Улики, которые нашел Блэк: {"  ".join(users[user_id]["user_evidences"])} Чтобы продолжить, скажите "продолжить".'
      else:
          res["response"]['text'] = f'У детектива нет ни одной зацепки! Чтобы продолжить, скажите "продолжить".'
      res['response']['buttons'] = [{'title': "Продолжить", 'hide': True}]
      users[user_id]["cont"] = 1
      return
  if "заново" in req['request']['original_utterance'].lower():
      res['response']['text'] = f'{restartim[random.randint(0, 2)]}'
      users[user_id]["user_evidences"] = []
      users[user_id]["rest"] = 1
      users[user_id]["cont"] = 1
      users[user_id]["used"] = []
      res['response']['buttons'] = [{'title': "Да", 'hide': True}]
      return
  if users[user_id]["b"] == 1:
      users[user_id]["question"] = random.choice(__questions[users[user_id]["stro"]])
      users[user_id]["used"].append(users[user_id]["question"])
      res['response']['text'] = f'{stor[users[user_id]["stro"]][users[user_id]["score"]]}\n{users[user_id]["question"][0]}'
      res["response"]['card'] = {"type": "BigImage",
                                 "image_id": f"{imgs[users[user_id]['stro']][users[user_id]['score']]}",
                                "description": f'{stor[users[user_id]["stro"]][users[user_id]["score"]]}\n{users[user_id]["question"][0]}'}
      users[user_id]["score"] = 1
      users[user_id]["a"] = res['response']
      return
  if users[user_id]["k"] == 1 or users[user_id]["h"] == 1:
      for i in ra[users[user_id]["stro"]]:
        if i in req['request']['original_utterance'].lower():
            res["response"]['card'] = {"type": "BigImage",
                                           "image_id": f"{imgs[0][5]}",
                                           "description": f'Да! Джейкоб как всегда оказался прав! Вот как все было на самом деле: {real_story[users[user_id]["stro"]]} Попробуете снова?'}
            res["response"]['text'] = f'Да! Джейкоб как всегда оказался прав! Вот как все было на самом деле: {real_story[users[user_id]["stro"]]} Начнём сначала?'
            users[user_id]["rest"] = 1
            users[user_id]["user_evidences"] = []
            users[user_id]["used"] = []
            break
      else:
          if users[user_id]["h"] == 0:
              res["response"]['text'] = f'{pobe[random.randint(0, 3)]} {final[users[user_id]["stro"]]}'
              res['response']['buttons'] = [{'title': podoz, 'hide': True} for podoz in podozrev[users[user_id]["stro"]]]
              users[user_id]["h"] = 1
          else:
              res["response"]['card'] = {"type": "BigImage",
                                             "image_id": f"{imgs[0][6]}",
                                             "description": f'{porog[random.randint(0, 3)]}'}
              res["response"]['text'] = f'"'
              users[user_id]["user_evidences"] = []
              users[user_id]["used"] = []
              users[user_id]["rest"] = 1
      users[user_id]["a"] = res['response']
      return
  if users[user_id]["score"] == users[user_id]["ns"]:
      if req['request']['original_utterance'].lower() in users[user_id]["question"][1]:
          users[user_id]["user_evidences"].append(__evidences[users[user_id]["stro"]][users[user_id]["score"] - 1])
          res['response']['text'] = f"{sucv[users[user_id]['stro']][users[user_id]['score'] - 1]} {__evidences[users[user_id]['stro']][users[user_id]['score'] - 1]}. "
      else:
          res['response']['text'] = f"{loose[users[user_id]['stro']][users[user_id]['score'] - 1]}. "
      if len(users[user_id]["user_evidences"]) >= 3:
          res["response"]['text'] += f'''Собрав достаточное количество улик, Джейкоб пришел к выводу о том, что наверняка знает, что произошло. Назовите убийцу.'''
      else:
          res["response"]['text'] += f'''Несмотря на небольшое количество улик, Джейкоб пришел к выводу о том, что наверняка знает, что произошло. Назовите убийцу.'''
      users[user_id]["k"] = 1
      users[user_id]["a"] = res['response']
      return
  if users[user_id]["score"] != 0 and users[user_id]["c"] != 1:
      for i in users[user_id]["question"][1]:
        if req['request']['original_utterance'].lower() in i:
          while users[user_id]["question"] in users[user_id]["used"]:
              users[user_id]["question"] = random.choice(__questions[users[user_id]["stro"]])
          users[user_id]["used"].append(users[user_id]["question"])
          res['response']['text'] = f'{sucv[users[user_id]["stro"]][users[user_id]["score"] - 1]}\n{stor[users[user_id]["stro"]][users[user_id]["score"]]}\n{users[user_id]["question"][0]}'
          res['response']['card'] = {"type": "BigImage",
                                       "image_id": f"{imgs[users[user_id]['stro']][users[user_id]['score']]}",
                                       "description": f'''{sucv[users[user_id]["stro"]][users[user_id]["score"] - 1]} {__evidences[users[user_id]["stro"]][users[user_id]["score"] - 1]} {stor[users[user_id]["stro"]][users[user_id]["score"]]}
\n{users[user_id]["question"][0]}'''}
          users[user_id]["user_evidences"].append(__evidences[users[user_id]["stro"]][users[user_id]["score"] - 1])
          users[user_id]["a"] = res['response']
          users[user_id]["score"] += 1
          return
      while users[user_id]["question"] in users[user_id]["used"]:
          users[user_id]["question"] = random.choice(__questions[users[user_id]["stro"]])
      users[user_id]["used"].append(users[user_id]["question"])
      res["response"]['text'] = f'{loose[users[user_id]["stro"]][users[user_id]["score"] - 1]} {stor[users[user_id]["stro"]][users[user_id]["score"]]} {users[user_id]["question"][0]}'
      res["response"]['card'] = {"type": "BigImage",
                                      "image_id": f"{imgs[users[user_id]['stro']][users[user_id]['score']]}",
                                      "description": f'''{loose[users[user_id]["stro"]][users[user_id]["score"] - 1]} {stor[users[user_id]["stro"]][users[user_id]["score"]]}
\n{users[user_id]["question"][0]}'''}
      users[user_id]["a"] = res['response']
      users[user_id]["score"] += 1
      return
  else:
      res['response']['text'] = unkn[random.randint(0, 3)]
      return

if __name__ == '__main__':
  app.run()
